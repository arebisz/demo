import base64
import json
import os
import urllib3
import uuid
from urllib.parse import quote
from google.cloud import secretmanager

ccp_snow = os.environ.get("ccp_snow")
company_name = os.environ.get("company_name")

payload = json.loads("""
{
    "companyName": "",
    "ticketWorkflow": {
        "requestedFor": "no-reply@pubsub.cloud.google.com"
    },
    "assigneeGroup": "CG CCP Operations",
    "shortDescription": "GCP Alert",
    "fullDescription": "GCP Alert",
    "mainCategory": "Monitoring",
    "subCategory": "Alert",
    "source": "infrastructure_event",
    "impact": "3 - Moderate/Limited",
    "urgency": "3 - Medium",
    "impactedCi": "E"
}""")


def main(event, context):

    if 'data' in event:
        snow_secrets = get_secret()
        token = generate_token(json.loads(snow_secrets)['client_id'], json.loads(snow_secrets)['client_secret'])
        pubsub_message = base64.b64decode(event['data']).decode('utf-8')
        if 'incident' in pubsub_message:
            if json.loads(pubsub_message)['incident']['state'] == 'open':
                update_payload(company_name, pubsub_message)
                send_request_to_api(token, company_name)
            else:
                print("Event did not match criteria for SNOW notification")
        else:
            print("Event did not match criteria for SNOW notification")
    else:
        print("No data in event. Skipping...")

# if secret_enviroments will be added to gcp terraform provider this function and secretmanager import won't be needed: https://github.com/hashicorp/terraform-provider-google/issues/9946
def get_secret():
    client = secretmanager.SecretManagerServiceClient()
    response = client.access_secret_version(request={"name": ccp_snow})
    payload = response.payload.data.decode("UTF-8")
    return payload

def generate_token(client_id, client_secret):
    token_url = 'https://ipaasprod-apis.eu1.ccp.capgemini.com/token'
    token_headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    body = f'grant_type=client_credentials&client_id={client_id}&client_secret={client_secret}'
    http = urllib3.PoolManager()
    response = http.request('POST', token_url, body=body, headers=token_headers)
    if response.status == 200:
        print("token generated")
        return json.loads(response._body.decode("utf-8"))['access_token']
    else:
        print("token NOT generated")
        return None


def update_payload(company_name, pubsub_message):
    payload['companyName'] = company_name
    print("Pub/Sub message: ", json.loads(pubsub_message))

    fullDescription = json.loads(pubsub_message)['incident']['summary']
    metric_filter = json.loads(pubsub_message)['incident']['condition']['conditionThreshold']['filter']
    for metric_value in metric_filter.split(' '):
        if 'instance_name' in metric_value:
            instance_name = ((metric_value.split('='))[-1]).split('"')[1]
            payload['impactedCi'] = instance_name
    payload['fullDescription'] = str(json.dumps(fullDescription))
    payload['shortDescription'] = "Ticket generated by ALARM: " + json.loads(pubsub_message)['incident']['policy_name'] + " for " + instance_name


def send_request_to_api(token, company_name):
    print("send_request_to_api")
    api_url = f'https://ipaasprod-apis.eu1.ccp.capgemini.com/incident-business-service/incidents?uuid={str(uuid.uuid1())}&companyName={company_name}'
    api_headers = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Authorization': f"Bearer {token}"}
    print("api_headers: ", api_headers)
    print(api_url)
    print(payload)
    body = json.dumps(payload).encode("utf-8")
    http = urllib3.PoolManager()
    response = http.request('POST', api_url, body=body, headers=api_headers)
    if response.status == 200:
        print("request completed")
    else:
        print("request failed with code: {}".format(response.status))
